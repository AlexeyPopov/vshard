test_run = require('test_run').new()
---
...
REPLICASET_1 = { 'storage_1_a', 'storage_1_b' }
---
...
REPLICASET_2 = { 'storage_2_a', 'storage_2_b' }
---
...
test_run:create_cluster(REPLICASET_1, 'storage')
---
...
test_run:create_cluster(REPLICASET_2, 'storage')
---
...
util = require('util')
---
...
util.wait_master(test_run, REPLICASET_1, 'storage_1_a')
---
...
util.wait_master(test_run, REPLICASET_2, 'storage_2_a')
---
...
test_run:switch('storage_1_a')
---
- true
...
box.cfg.read_only
---
- false
...
s = box.schema.create_space('test')
---
...
pk = s:create_index('pk')
---
...
ok = nil
---
...
err = nil
---
...
function on_master_enable() s:replace{1} end
---
...
-- Test, that in disable trigger already can not write.
function on_master_disable() ok, err = pcall(s.replace, s, {2}) end
---
...
vshard.storage.on_master_enable(on_master_enable)
---
...
vshard.storage.on_master_disable(on_master_disable)
---
...
s:select{}
---
- - [1]
...
test_run:switch('storage_1_b')
---
- true
...
box.cfg.read_only
---
- true
...
box.schema.create_space('test2')
---
- error: Can't modify data because this instance is in read-only mode.
...
fiber = require('fiber')
---
...
while box.space.test == nil do fiber.sleep(0.1) end
---
...
s = box.space.test
---
...
function on_master_enable() s:replace{3} end
---
...
function on_master_disable() if not box.cfg.read_only then s:replace{4} end end
---
...
vshard.storage.on_master_enable(on_master_enable)
---
...
vshard.storage.on_master_disable(on_master_disable)
---
...
-- Yes, there is no 3 or 4, because a trigger on disable always
-- works in readonly.
s:select{}
---
- - [1]
...
-- Check that after master change the read_only is updated, and
-- that triggers on master role switch can change spaces.
cfg.sharding[replicasets[1]].replicas[names.storage_1_b].master = true
---
...
cfg.sharding[replicasets[1]].replicas[names.storage_1_a].master = false
---
...
vshard.storage.cfg(cfg, names.storage_1_b)
---
...
box.cfg.read_only
---
- false
...
s:select{}
---
- - [1]
  - [3]
...
test_run:switch('storage_1_a')
---
- true
...
cfg.sharding[replicasets[1]].replicas[names.storage_1_b].master = true
---
...
cfg.sharding[replicasets[1]].replicas[names.storage_1_a].master = false
---
...
vshard.storage.cfg(cfg, names.storage_1_a)
---
...
box.cfg.read_only
---
- true
...
ok, err
---
- false
- Can't modify data because this instance is in read-only mode.
...
fiber = require('fiber')
---
...
while s:count() ~= 2 do fiber.sleep(0.1) end
---
...
s:select{}
---
- - [1]
  - [3]
...
test_run:switch('storage_1_b')
---
- true
...
s:drop()
---
...
test_run:cmd("switch default")
---
- true
...
test_run:drop_cluster(REPLICASET_2)
---
...
test_run:drop_cluster(REPLICASET_1)
---
...
