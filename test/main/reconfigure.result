test_run = require('test_run').new()
---
...
test_run:cmd("push filter '.*/init.lua.*[0-9]+: ' to ''")
---
- true
...
REPLICASET_1 = { 'storage_1_a', 'storage_1_b' }
---
...
REPLICASET_2 = { 'storage_2_a', 'storage_2_b' }
---
...
test_run:create_cluster(REPLICASET_1, 'main')
---
...
test_run:create_cluster(REPLICASET_2, 'main')
---
...
test_run:wait_fullmesh(REPLICASET_1)
---
...
test_run:wait_fullmesh(REPLICASET_2)
---
...
test_run:cmd('create server router_1 with script="main/router_1.lua", wait=True, wait_load=True')
---
- true
...
test_run:cmd('start server router_1')
---
- true
...
test_run:switch('default')
---
- true
...
cfg = require'localcfg'
---
...
rs1_id = 'cbf06940-0790-498b-948d-042b62cf3d29'
---
...
s1_2_id = '3de2e3e1-9ebe-4d0d-abb1-26d301b84633'
---
...
rs2_id = 'ac522f65-aa94-4134-9f64-51ee384f1a54'
---
...
s2_1_id = '1e02ae8a-afc0-4e91-ba34-843a356b8ed7'
---
...
s2_2_id = '001688c3-66f8-4a31-8e19-036c17d489c2'
---
...
rs3_id = '910ee49b-2540-41b6-9b8c-c976bef1bb17'
---
...
s3_1_id = 'ee34807e-be5c-4ae3-8348-e97be227a305'
---
...
cfg.sharding[rs1_id].replicas[s1_2_id] = nil
---
...
cfg.sharding[rs2_id].replicas[s2_1_id].master = nil
---
...
cfg.sharding[rs2_id].replicas[s2_2_id].master = true
---
...
cfg.sharding[rs3_id] = {replicas = {[s3_1_id] = {uri = "storage:storage@127.0.0.1:3306", name = 'storage_3_a', master = true}}}
---
...
REPLICASET_3 = {'storage_3_a'}
---
...
test_run:create_cluster(REPLICASET_3, 'main')
---
...
-- test for unknown uuid
test_run:cmd('switch storage_1_a')
---
- true
...
util = require('util')
---
...
util.check_error(vshard.storage.cfg, cfg, 'unknow uuid')
---
- Local replica unknow uuid wasn't found in config
...
--
-- gh-59: provide trigger on master enable/disable.
--
disable_count = 0
---
...
enable_count = 0
---
...
function on_master_disable() disable_count = disable_count + 1 end
---
...
function on_master_enable() enable_count = enable_count + 1 end
---
...
vshard.storage.on_master_disable(on_master_disable)
---
...
vshard.storage.on_master_enable(on_master_enable)
---
...
-- test without master
for _, rs in pairs(cfg.sharding) do for _, s in pairs(rs.replicas) do s.master = nil end end
---
...
vshard.storage.cfg(cfg, box.info.uuid)
---
...
disable_count
---
- 1
...
test_run:cmd('switch default')
---
- true
...
test_run:cmd('stop server storage_1_b')
---
- true
...
cmd = 'cfg.sharding = require"json".decode([[' .. require"json".encode(cfg.sharding) .. ']])'
---
...
test_run:cmd('eval storage_1_a \'' .. cmd .. '\'')
---
- []
...
test_run:cmd('eval storage_2_a \'' .. cmd .. '\'')
---
- []
...
test_run:cmd('eval storage_2_b \'' .. cmd .. '\'')
---
- []
...
test_run:cmd('eval storage_3_a \'' .. cmd .. '\'')
---
- []
...
test_run:cmd('eval router_1 \'' .. cmd .. '\'')
---
- []
...
test_run:switch('storage_1_a')
---
- true
...
vshard.storage.cfg(cfg, names['storage_1_a'])
---
...
enable_count
---
- 2
...
test_run:switch('storage_2_a')
---
- true
...
vshard.storage.cfg(cfg, names['storage_2_a'])
---
...
test_run:switch('storage_2_b')
---
- true
...
vshard.storage.cfg(cfg, names['storage_2_b'])
---
...
test_run:switch('router_1')
---
- true
...
vshard.router.cfg(cfg)
---
...
test_run:cmd('switch default')
---
- true
...
REPLICASET_1 = {'storage_1_a'}
---
...
test_run:wait_fullmesh(REPLICASET_1)
---
...
test_run:wait_fullmesh(REPLICASET_2)
---
...
test_run:wait_fullmesh(REPLICASET_3)
---
...
-- Check correctness on each replicaset.
test_run:switch('storage_1_a')
---
- true
...
info = vshard.storage.info()
---
...
uris = {}
---
...
for k,v in pairs(info.replicasets) do table.insert(uris, v.master.uri) end
---
...
table.sort(uris)
---
...
uris
---
- - storage@127.0.0.1:3301
  - storage@127.0.0.1:3304
  - storage@127.0.0.1:3306
...
box.cfg.replication
---
- - storage:storage@127.0.0.1:3301
...
test_run:switch('storage_2_a')
---
- true
...
info = vshard.storage.info()
---
...
uris = {}
---
...
for k,v in pairs(info.replicasets) do table.insert(uris, v.master.uri) end
---
...
table.sort(uris)
---
...
uris
---
- - storage@127.0.0.1:3301
  - storage@127.0.0.1:3304
  - storage@127.0.0.1:3306
...
box.cfg.replication
---
- - storage:storage@127.0.0.1:3303
  - storage:storage@127.0.0.1:3304
...
test_run:switch('storage_2_b')
---
- true
...
info = vshard.storage.info()
---
...
uris = {}
---
...
for k,v in pairs(info.replicasets) do table.insert(uris, v.master.uri) end
---
...
table.sort(uris)
---
...
uris
---
- - storage@127.0.0.1:3301
  - storage@127.0.0.1:3304
  - storage@127.0.0.1:3306
...
box.cfg.replication
---
- - storage:storage@127.0.0.1:3303
  - storage:storage@127.0.0.1:3304
...
test_run:switch('storage_3_a')
---
- true
...
info = vshard.storage.info()
---
...
uris = {}
---
...
for k,v in pairs(info.replicasets) do table.insert(uris, v.master.uri) end
---
...
table.sort(uris)
---
...
uris
---
- - storage@127.0.0.1:3301
  - storage@127.0.0.1:3304
  - storage@127.0.0.1:3306
...
box.cfg.replication
---
- - storage:storage@127.0.0.1:3306
...
test_run:switch('router_1')
---
- true
...
info = vshard.router.info()
---
...
uris = {}
---
...
for k,v in pairs(info.replicasets) do table.insert(uris, v.master.uri) end
---
...
table.sort(uris)
---
...
uris
---
- - storage@127.0.0.1:3301
  - storage@127.0.0.1:3304
  - storage@127.0.0.1:3306
...
test_run:switch('default')
---
- true
...
test_run:cmd('stop server router_1')
---
- true
...
test_run:cmd('cleanup server router_1')
---
- true
...
test_run:drop_cluster(REPLICASET_1)
---
...
test_run:drop_cluster(REPLICASET_2)
---
...
test_run:drop_cluster(REPLICASET_3)
---
...
