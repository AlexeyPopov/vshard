test_run = require('test_run').new()
---
...
REPLICASET_1 = { 'storage_1_a', 'storage_1_b' }
---
...
REPLICASET_2 = { 'storage_2_a', 'storage_2_b' }
---
...
test_run:create_cluster(REPLICASET_1, 'main')
---
...
test_run:create_cluster(REPLICASET_2, 'main')
---
...
test_run:wait_fullmesh(REPLICASET_1)
---
...
test_run:wait_fullmesh(REPLICASET_2)
---
...
--
-- Test timeout error during bucket sending, when on a destination
-- bucket becomes active.
--
test_run:cmd('switch storage_2_a')
---
- true
...
box.error.injection.set("ERRINJ_WAL_DELAY", true)
---
- ok
...
test_run:cmd('switch storage_1_a')
---
- true
...
_bucket = box.space._bucket
---
...
_bucket:replace{1, vshard.consts.BUCKET.ACTIVE, replicasets[2]}
---
- [1, 'active', 'ac522f65-aa94-4134-9f64-51ee384f1a54']
...
ret, err = vshard.storage.bucket_send(1, replicasets[2])
---
...
ret, err.code
---
- null
- 78
...
_bucket = box.space._bucket
---
...
_bucket:select{}
---
- - [1, 'sending', 'ac522f65-aa94-4134-9f64-51ee384f1a54']
...
test_run:cmd('switch storage_2_a')
---
- true
...
box.error.injection.set("ERRINJ_WAL_DELAY", false)
---
- ok
...
_bucket = box.space._bucket
---
...
_bucket:select{}
---
- - [1, 'active']
...
test_run:cmd('switch storage_1_a')
---
- true
...
fiber = require('fiber')
---
...
while _bucket:count() ~= 0 do vshard.storage.recovery_wakeup() fiber.sleep(0.1) end
---
...
test_run:cmd("switch default")
---
- true
...
test_run:drop_cluster(REPLICASET_2)
---
...
test_run:drop_cluster(REPLICASET_1)
---
...
