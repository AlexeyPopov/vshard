test_run = require('test_run').new()
---
...
REPLICASET_1 = { 'storage_1_a', 'storage_1_b' }
---
...
REPLICASET_2 = { 'storage_2_a', 'storage_2_b' }
---
...
test_run:create_cluster(REPLICASET_1, 'main')
---
...
test_run:create_cluster(REPLICASET_2, 'main')
---
...
test_run:wait_fullmesh(REPLICASET_1)
---
...
test_run:wait_fullmesh(REPLICASET_2)
---
...
test_run:cmd('create server router_1 with script="main/router_1.lua", wait=True, wait_load=True')
---
- true
...
test_run:cmd('start server router_1')
---
- true
...
test_run:switch('storage_1_a')
---
- true
...
vshard.storage.wait_discovery()
---
- true
...
test_run:switch('storage_1_b')
---
- true
...
vshard.storage.wait_discovery()
---
- true
...
test_run:switch('default')
---
- true
...
REPLICASET_3 = {'storage_3_a'}
---
...
test_run:create_cluster(REPLICASET_3, 'main')
---
...
test_run:switch('storage_3_a')
---
- true
...
vshard.storage.wait_discovery()
---
- true
...
test_run:switch('default')
---
- true
...
test_run:cmd('stop server storage_1_b')
---
- true
...
test_run:switch('storage_1_a')
---
- true
...
cfg.sharding[1][2] = nil
---
...
cfg.sharding[2][1].master = nil
---
...
cfg.sharding[2][2].master = true
---
...
cfg.sharding[3] = {{uri = "storage:storage@127.0.0.1:3306", name = 'storage_3_a', master = true}}
---
...
vshard.storage.cfg(cfg, 'storage_1_a')
---
...
test_run:switch('storage_2_a')
---
- true
...
cfg.sharding[1][2] = nil
---
...
cfg.sharding[2][1].master = nil
---
...
cfg.sharding[2][2].master = true
---
...
cfg.sharding[3] = {{uri = "storage:storage@127.0.0.1:3306", name = 'storage_3_a', master = true}}
---
...
vshard.storage.cfg(cfg, 'storage_2_a')
---
...
vshard.storage.wait_discovery()
---
- true
...
test_run:switch('storage_2_b')
---
- true
...
cfg.sharding[1][2] = nil
---
...
cfg.sharding[2][1].master = nil
---
...
cfg.sharding[2][2].master = true
---
...
cfg.sharding[3] = {{uri = "storage:storage@127.0.0.1:3306", name = 'storage_3_a', master = true}}
---
...
vshard.storage.cfg(cfg, 'storage_2_b')
---
...
vshard.storage.wait_discovery()
---
- true
...
test_run:switch('router_1')
---
- true
...
cfg.sharding[1][2] = nil
---
...
cfg.sharding[2][1].master = nil
---
...
cfg.sharding[2][2].master = true
---
...
cfg.sharding[3] = {{uri = "storage:storage@127.0.0.1:3306", name = 'storage_3_a', master = true}}
---
...
vshard.router.cfg(cfg)
---
...
test_run:cmd('switch default')
---
- true
...
REPLICASET_1 = {'storage_1_a'}
---
...
test_run:wait_fullmesh(REPLICASET_1)
---
...
test_run:wait_fullmesh(REPLICASET_2)
---
...
test_run:wait_fullmesh(REPLICASET_3)
---
...
-- Check correctness on each replicaset.
test_run:switch('storage_1_a')
---
- true
...
vshard.storage.wait_discovery()
---
- true
...
info = vshard.storage.info()
---
...
uris = {}
---
...
for k,v in pairs(info.replicasets) do table.insert(uris, v.master.uri) end
---
...
table.sort(uris)
---
...
uris
---
- - storage:storage@127.0.0.1:3301
  - storage:storage@127.0.0.1:3304
  - storage:storage@127.0.0.1:3306
...
box.cfg.replication
---
- - storage:storage@127.0.0.1:3301
...
test_run:switch('storage_2_a')
---
- true
...
vshard.storage.wait_discovery()
---
- true
...
info = vshard.storage.info()
---
...
uris = {}
---
...
for k,v in pairs(info.replicasets) do table.insert(uris, v.master.uri) end
---
...
table.sort(uris)
---
...
uris
---
- - storage:storage@127.0.0.1:3301
  - storage:storage@127.0.0.1:3304
  - storage:storage@127.0.0.1:3306
...
box.cfg.replication
---
- - storage:storage@127.0.0.1:3303
  - storage:storage@127.0.0.1:3304
...
test_run:switch('storage_2_b')
---
- true
...
vshard.storage.wait_discovery()
---
- true
...
info = vshard.storage.info()
---
...
uris = {}
---
...
for k,v in pairs(info.replicasets) do table.insert(uris, v.master.uri) end
---
...
table.sort(uris)
---
...
uris
---
- - storage:storage@127.0.0.1:3301
  - storage:storage@127.0.0.1:3304
  - storage:storage@127.0.0.1:3306
...
box.cfg.replication
---
- - storage:storage@127.0.0.1:3303
  - storage:storage@127.0.0.1:3304
...
test_run:switch('storage_3_a')
---
- true
...
vshard.storage.wait_discovery()
---
- true
...
info = vshard.storage.info()
---
...
uris = {}
---
...
for k,v in pairs(info.replicasets) do table.insert(uris, v.master.uri) end
---
...
table.sort(uris)
---
...
uris
---
- - storage:storage@127.0.0.1:3301
  - storage:storage@127.0.0.1:3304
  - storage:storage@127.0.0.1:3306
...
box.cfg.replication
---
- - storage:storage@127.0.0.1:3306
...
test_run:switch('router_1')
---
- true
...
info = vshard.router.info()
---
...
uris = {}
---
...
for k,v in pairs(info.replicasets) do table.insert(uris, v.master.uri) end
---
...
table.sort(uris)
---
...
uris
---
- - storage:storage@127.0.0.1:3301
  - storage:storage@127.0.0.1:3304
  - storage:storage@127.0.0.1:3306
...
test_run:switch('default')
---
- true
...
test_run:drop_cluster(REPLICASET_1)
---
...
test_run:drop_cluster(REPLICASET_2)
---
...
test_run:drop_cluster(REPLICASET_3)
---
...
