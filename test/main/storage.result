test_run = require('test_run').new()
---
...
test_run:cmd("push filter '.*/init.lua.*[0-9]+: ' to ''")
---
- true
...
netbox = require('net.box')
---
...
fiber = require('fiber')
---
...
REPLICASET_1 = { 'storage_1_a', 'storage_1_b' }
---
...
REPLICASET_2 = { 'storage_2_a', 'storage_2_b' }
---
...
test_run:create_cluster(REPLICASET_1, 'main')
---
...
test_run:create_cluster(REPLICASET_2, 'main')
---
...
test_run:wait_fullmesh(REPLICASET_1)
---
...
test_run:wait_fullmesh(REPLICASET_2)
---
...
replicaset1_uuid = test_run:eval('storage_1_a', 'box.info.cluster.uuid')[1]
---
...
replicaset2_uuid = test_run:eval('storage_2_a', 'box.info.cluster.uuid')[1]
---
...
test_run:cmd("push filter '"..replicaset1_uuid.."' to '<replicaset_1>'")
---
- true
...
test_run:cmd("push filter '"..replicaset2_uuid.."' to '<replicaset_2>'")
---
- true
...
storage_1_a_uuid = test_run:eval('storage_1_a', 'box.info.uuid')[1]
---
...
storage_1_b_uuid = test_run:eval('storage_1_b', 'box.info.uuid')[1]
---
...
storage_2_a_uuid = test_run:eval('storage_2_a', 'box.info.uuid')[1]
---
...
storage_2_b_uuid = test_run:eval('storage_2_b', 'box.info.uuid')[1]
---
...
test_run:cmd("push filter '"..storage_1_a_uuid.."' to '<storage_1_a>'")
---
- true
...
test_run:cmd("push filter '"..storage_1_b_uuid.."' to '<storage_1_b>'")
---
- true
...
test_run:cmd("push filter '"..storage_2_a_uuid.."' to '<storage_2_a>'")
---
- true
...
test_run:cmd("push filter '"..storage_2_b_uuid.."' to '<storage_2_b>'")
---
- true
...
_ = test_run:cmd("switch storage_1_a")
---
...
replicaset1_uuid = test_run:eval('storage_1_a', 'box.info.cluster.uuid')[1]
---
...
replicaset2_uuid = test_run:eval('storage_2_a', 'box.info.cluster.uuid')[1]
---
...
vshard.storage.info().replicasets[replicaset1_uuid] or vshard.storage.info()
---
- uuid: <replicaset_1>
  master:
    uri: storage:storage@127.0.0.1:3301
...
vshard.storage.info().replicasets[replicaset2_uuid] or vshard.storage.info()
---
- uuid: <replicaset_2>
  master:
    uri: storage:storage@127.0.0.1:3303
...
vshard.storage.info().buckets
---
- {}
...
vshard.storage.bucket_force_create(1)
---
- 0
...
vshard.storage.info().buckets
---
- 1:
    status: active
    id: 1
...
vshard.storage.bucket_force_create(1) -- error
---
- error: Duplicate key exists in unique index 'pk' in space '_bucket'
...
vshard.storage.bucket_force_drop(1)
---
- 0
...
vshard.storage.info().buckets
---
- {}
...
vshard.storage.bucket_force_create(1)
---
- 0
...
vshard.storage.bucket_force_create(2)
---
- 0
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
box.begin()
for customer_id=1,8 do
    local bucket_id = customer_id % 4
    local name = string.format('Customer %d', customer_id)
    box.space.customer:insert({customer_id, bucket_id, name})
    for account_id=customer_id*10,customer_id*10+2 do
        local name = string.format('Account %d', account_id)
        box.space.account:insert({account_id, customer_id, bucket_id,
                                  100, name})
    end
end
box.commit();
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
box.space.customer:select()
---
- - [1, 1, 'Customer 1']
  - [2, 2, 'Customer 2']
  - [3, 3, 'Customer 3']
  - [4, 0, 'Customer 4']
  - [5, 1, 'Customer 5']
  - [6, 2, 'Customer 6']
  - [7, 3, 'Customer 7']
  - [8, 0, 'Customer 8']
...
box.space.account:select()
---
- - [10, 1, 1, 100, 'Account 10']
  - [11, 1, 1, 100, 'Account 11']
  - [12, 1, 1, 100, 'Account 12']
  - [20, 2, 2, 100, 'Account 20']
  - [21, 2, 2, 100, 'Account 21']
  - [22, 2, 2, 100, 'Account 22']
  - [30, 3, 3, 100, 'Account 30']
  - [31, 3, 3, 100, 'Account 31']
  - [32, 3, 3, 100, 'Account 32']
  - [40, 4, 0, 100, 'Account 40']
  - [41, 4, 0, 100, 'Account 41']
  - [42, 4, 0, 100, 'Account 42']
  - [50, 5, 1, 100, 'Account 50']
  - [51, 5, 1, 100, 'Account 51']
  - [52, 5, 1, 100, 'Account 52']
  - [60, 6, 2, 100, 'Account 60']
  - [61, 6, 2, 100, 'Account 61']
  - [62, 6, 2, 100, 'Account 62']
  - [70, 7, 3, 100, 'Account 70']
  - [71, 7, 3, 100, 'Account 71']
  - [72, 7, 3, 100, 'Account 72']
  - [80, 8, 0, 100, 'Account 80']
  - [81, 8, 0, 100, 'Account 81']
  - [82, 8, 0, 100, 'Account 82']
...
vshard.storage.bucket_collect(1)
---
- 0
- - - 514
    - - [10, 1, 1, 100, 'Account 10']
      - [11, 1, 1, 100, 'Account 11']
      - [12, 1, 1, 100, 'Account 12']
      - [50, 5, 1, 100, 'Account 50']
      - [51, 5, 1, 100, 'Account 51']
      - [52, 5, 1, 100, 'Account 52']
  - - 513
    - - [1, 1, 'Customer 1']
      - [5, 1, 'Customer 5']
...
vshard.storage.bucket_collect(2)
---
- 0
- - - 514
    - - [20, 2, 2, 100, 'Account 20']
      - [21, 2, 2, 100, 'Account 21']
      - [22, 2, 2, 100, 'Account 22']
      - [60, 6, 2, 100, 'Account 60']
      - [61, 6, 2, 100, 'Account 61']
      - [62, 6, 2, 100, 'Account 62']
  - - 513
    - - [2, 2, 'Customer 2']
      - [6, 2, 'Customer 6']
...
customer_lookup(1)
---
- accounts:
  - account_id: 10
    balance: 100
    name: Account 10
  - account_id: 11
    balance: 100
    name: Account 11
  - account_id: 12
    balance: 100
    name: Account 12
  customer_id: 1
  name: Customer 1
...
vshard.storage.call(1, 'read', 'customer_lookup', {1})
---
- 0
- accounts:
  - account_id: 10
    balance: 100
    name: Account 10
  - account_id: 11
    balance: 100
    name: Account 11
  - account_id: 12
    balance: 100
    name: Account 12
  customer_id: 1
  name: Customer 1
...
vshard.storage.call(100500, 'read', 'customer_lookup', {1})
---
- 2
- null
...
--
-- Bucket transfer
--
vshard.storage.bucket_send(1, replicaset2_uuid)
---
- true
...
_ = test_run:cmd("switch storage_2_a")
---
...
vshard.storage.info().buckets
---
- 1:
    status: active
    id: 1
...
_ = test_run:cmd("switch storage_1_a")
---
...
vshard.storage.info().buckets
---
- 1:
    status: sent
    destination: <replicaset_2>
    id: 1
  2:
    status: active
    id: 2
...
_ = test_run:cmd("switch default")
---
...
test_run:drop_cluster(REPLICASET_2)
---
...
test_run:drop_cluster(REPLICASET_1)
---
...
test_run:cmd('clear filter')
---
- true
...
