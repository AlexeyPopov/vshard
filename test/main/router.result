test_run = require('test_run').new()
---
...
test_run:cmd("push filter '.*/init.lua.*[0-9]+: ' to ''")
---
- true
...
netbox = require('net.box')
---
...
fiber = require('fiber')
---
...
REPLICASET_1 = { 'storage_1_a', 'storage_1_b' }
---
...
REPLICASET_2 = { 'storage_2_a', 'storage_2_b' }
---
...
test_run:create_cluster(REPLICASET_1, 'main')
---
...
test_run:create_cluster(REPLICASET_2, 'main')
---
...
util = require('util')
---
...
util.wait_master(test_run, REPLICASET_1, 'storage_1_a')
---
...
util.wait_master(test_run, REPLICASET_2, 'storage_2_a')
---
...
test_run:cmd("create server router_1 with script='main/router_1.lua'")
---
- true
...
test_run:cmd("start server router_1")
---
- true
...
replicaset1_uuid = test_run:eval('storage_1_a', 'box.info.cluster.uuid')[1]
---
...
replicaset2_uuid = test_run:eval('storage_2_a', 'box.info.cluster.uuid')[1]
---
...
test_run:cmd("push filter '"..replicaset1_uuid.."' to '<replicaset_1>'")
---
- true
...
test_run:cmd("push filter '"..replicaset2_uuid.."' to '<replicaset_2>'")
---
- true
...
_ = test_run:cmd("switch router_1")
---
...
-- gh-46: Ensure a cfg is not destroyed after router.cfg().
cfg.sharding ~= nil
---
- true
...
util = require('util')
---
...
-- gh-24: log all connnect/disconnect events.
test_run:grep_log('router_1', 'connected to ')
---
- 'connected to '
...
rs1 = vshard.router.internal.replicasets[replicasets[1]]
---
...
rs2 = vshard.router.internal.replicasets[replicasets[2]]
---
...
fiber = require('fiber')
---
...
while not rs1.replica or not rs2.replica do fiber.sleep(0.1) end
---
...
-- With no zones the nearest server is master.
rs1.replica == rs1.master
---
- true
...
rs2.replica == rs2.master
---
- true
...
--
-- bucket_id and bucket_count
--
util.check_error(vshard.router.bucket_id) -- invalid arguments
---
- 'Usage: vshard.router.bucket_id(key)'
...
vshard.router.bucket_id(1)
---
- 477
...
vshard.router.bucket_id(2)
---
- 401
...
vshard.router.bucket_id({2})
---
- 401
...
vshard.router.bucket_id('2')
---
- 401
...
vshard.router.bucket_count()
---
- 3000
...
--
-- Initial distribution
--
util.check_error(vshard.router.call, 1, 'read', 'echo', {123})
---
- null
- type: ShardingError
  bucket_id: 1
  code: 9
...
replicaset, err = vshard.router.bucket_discovery(1); return err == nil or err
---
- type: ShardingError
  bucket_id: 1
  code: 9
...
vshard.router.bootstrap()
---
- true
...
-- Second one should produce error
vshard.router.bootstrap()
---
- null
- type: ShardingError
  code: 10
  message: Cluster is already bootstrapped
...
--
-- Test lua errors.
--
_, e = vshard.router.callro(1, 'raise_client_error', {}, {})
---
...
e.trace = nil
---
...
e
---
- type: ClientError
  code: 32
  message: Unknown error
...
--
-- gh-48: more precise error messages about bucket unavailability.
--
util.check_error(vshard.router.call, vshard.consts.DEFAULT_BUCKET_COUNT + 1, 'read', 'echo', {123})
---
- 'Bucket is unreachable: bucket id is out of range'
...
util.check_error(vshard.router.call, -1, 'read', 'echo', {123})
---
- 'Bucket is unreachable: bucket id is out of range'
...
util.check_error(vshard.router.call, 0, 'read', 'echo', {123})
---
- 'Bucket is unreachable: bucket id is out of range'
...
replicaset, err = vshard.router.bucket_discovery(0); return err == nil or err
---
- type: ShardingError
  bucket_id: 0
  code: 9
...
replicaset, err = vshard.router.bucket_discovery(1); return err == nil or err
---
- true
...
replicaset, err = vshard.router.bucket_discovery(2); return err == nil or err
---
- true
...
test_run:cmd('switch storage_2_a')
---
- true
...
box.space._bucket:replace({1, vshard.consts.BUCKET.SENDING})
---
- [1, 'sending']
...
test_run:cmd('switch storage_1_a')
---
- true
...
box.space._bucket:replace({1, vshard.consts.BUCKET.RECEIVING})
---
- [1, 'receiving']
...
test_run:cmd('switch router_1')
---
- true
...
-- Ok to read sending bucket.
vshard.router.call(1, 'read', 'echo', {123})
---
- 123
...
-- Not ok to write sending bucket.
util.check_error(vshard.router.call, 1, 'write', 'echo', {123})
---
- null
- {'type': 'ShardingError', 'code': 7, 'bucket_id': 1}
...
test_run:cmd('switch storage_2_a')
---
- true
...
box.space._bucket:replace({1, vshard.consts.BUCKET.ACTIVE})
---
- [1, 'active']
...
test_run:cmd('switch storage_1_a')
---
- true
...
box.space._bucket:delete({1})
---
- [1, 'receiving']
...
test_run:cmd('switch router_1')
---
- true
...
-- Check unavailability of master of a replicaset.
_ = vshard.router.bucket_discovery(2)
---
...
_ = vshard.router.bucket_discovery(3)
---
...
vshard.router.buckets_info(0, 3)
---
- - status: unknown
  - uuid: <replicaset_2>
    status: available_rw
  - uuid: <replicaset_2>
    status: available_rw
...
test_run:cmd('stop server storage_2_a')
---
- true
...
util.check_error(vshard.router.call, 1, 'read', 'echo', {123})
---
- null
- type: ShardingError
  unreachable_uuid: <replicaset_2>
  code: 8
  bucket_id: 1
...
vshard.router.buckets_info(0, 3)
---
- - status: unknown
  - uuid: <replicaset_2>
    status: unreachable
  - uuid: <replicaset_2>
    status: unreachable
...
test_run:cmd('start server storage_2_a')
---
- true
...
--
-- gh-26: API to get netbox by bucket identifier.
--
vshard.router.route(vshard.consts.DEFAULT_BUCKET_COUNT + 100)
---
- null
- type: ShardingError
  bucket_id: 3100
  code: 9
...
util.check_error(vshard.router.route, 'asdfg')
---
- 'Usage: router.route(bucket_id)'
...
util.check_error(vshard.router.route)
---
- 'Usage: router.route(bucket_id)'
...
conn = vshard.router.route(1).master.conn
---
...
conn.state
---
- active
...
-- Test missing master.
rs_uuid = '<replicaset_2>'
---
...
rs = vshard.router.internal.replicasets[rs_uuid]
---
...
master = rs.master
---
...
rs.master = nil
---
...
vshard.router.route(1).master
---
- null
...
rs.master = master
---
...
-- Test reconnect on bucker_route().
rs:disconnect()
---
- true
...
conn = vshard.router.route(1):connect()
---
...
conn:wait_connected()
---
- true
...
conn.state
---
- active
...
--
-- gh-44: API to get connections to all replicasets.
--
map = vshard.router.routeall()
---
...
uuids = {}
---
...
for uuid, _ in pairs(map) do table.insert(uuids, uuid) end
---
...
uuids
---
- - <replicaset_2>
  - <replicaset_1>
...
--
-- Function call
--
bucket_id = 1
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
customer = {
    customer_id = 1,
    name = "Customer 1",
    bucket_id = bucket_id,
    accounts = {
        {
            account_id = 10,
            name = "Credit Card",
            balance = 100,
        },
        {
            account_id = 11,
            name = "Debit Card",
            balance = 50,
        },
    }
}
test_run:cmd("setopt delimiter ''");
---
...
--
-- gh-69: aliases for router.call - callro and callrw.
--
vshard.router.callrw(bucket_id, 'customer_add', {customer})
---
- true
...
vshard.router.callro(bucket_id, 'customer_lookup', {1})
---
- {'accounts': [{'account_id': 10, 'balance': 0, 'name': 'Credit Card'}, {'account_id': 11,
      'balance': 0, 'name': 'Debit Card'}], 'customer_id': 1, 'name': 'Customer 1'}
...
vshard.router.callro(bucket_id + 1500, 'customer_lookup', {1}) -- nothing
---
- null
...
--
-- Test errors from router call.
--
new_bid = vshard.consts.DEFAULT_BUCKET_COUNT + 1
---
...
space_data = {{1000, {{1}, {2}}}}
---
...
-- Insert in a not existing space - it must return box.error.
vshard.router.call(bucket_id, 'write', 'vshard.storage.bucket_recv', {new_bid, 'from_uuid', space_data})
---
- null
- {'type': 'ClientError', 'message': 'Space ''1000'' does not exist', 'code': 36,
  'trace': [{'file': '[C]', 'line': 4294967295}]}
...
--
-- Monitoring
--
-- All is ok, when all servers are up.
vshard.router.info()
---
- replicasets:
    <replicaset_2>:
      replica: &0
        network_timeout: 0.5
        status: available
        uri: storage@127.0.0.1:3303
        uuid: 1e02ae8a-afc0-4e91-ba34-843a356b8ed7
      uuid: <replicaset_2>
      master: *0
    <replicaset_1>:
      replica: &1
        network_timeout: 0.5
        status: available
        uri: storage@127.0.0.1:3301
        uuid: 8a274925-a26d-47fc-9e1b-af88ce939412
      uuid: <replicaset_1>
      master: *1
  bucket:
    unreachable: 0
    available_ro: 0
    unknown: 2996
    available_rw: 4
  status: 1
  alerts:
  - ['UNKNOWN_BUCKETS', '2996 buckets are not discovered']
...
-- Remove replica and master connections to trigger alert
-- UNREACHABLE_REPLICASET.
rs = vshard.router.internal.replicasets[replicasets[1]]
---
...
master_conn = rs.master.conn
---
...
replica_conn = rs.replica.conn
---
...
rs.master.conn = nil
---
...
rs.replica.conn = nil
---
...
info = vshard.router.info()
---
...
info.replicasets[rs.uuid]
---
- replica: &0
    network_timeout: 0.5
    status: unreachable
    uri: storage@127.0.0.1:3301
    uuid: 8a274925-a26d-47fc-9e1b-af88ce939412
  uuid: <replicaset_1>
  master: *0
...
info.status
---
- 3
...
info.alerts
---
- - ['UNREACHABLE_MASTER', 'Master of replicaset <replicaset_1>
      is unreachable: disconnected']
  - ['UNREACHABLE_REPLICASET', 'There is no active replicas in replicaset <replicaset_1>']
  - ['UNKNOWN_BUCKETS', '2996 buckets are not discovered']
...
rs.master.conn = master_conn
---
...
rs.replica.conn = replica_conn
---
...
-- Trigger alert MISSING_MASTER by manual removal of master.
master = rs.master
---
...
rs.master = nil
---
...
info = vshard.router.info()
---
...
info.replicasets[rs.uuid]
---
- replica:
    network_timeout: 0.5
    status: available
    uri: storage@127.0.0.1:3301
    uuid: 8a274925-a26d-47fc-9e1b-af88ce939412
  uuid: <replicaset_1>
  master:
    status: missing
...
info.status
---
- 2
...
info.alerts
---
- - ['MISSING_MASTER', 'Master is not configured for replicaset <replicaset_1>']
  - ['UNKNOWN_BUCKETS', '2996 buckets are not discovered']
...
rs.master = master
---
...
buckets_info = vshard.router.buckets_info()
---
...
#buckets_info
---
- 3000
...
buckets_info[1]
---
- uuid: <replicaset_2>
  status: available_rw
...
buckets_info[1501]
---
- uuid: <replicaset_1>
  status: available_rw
...
vshard.router.buckets_info(0, 3)
---
- - uuid: <replicaset_2>
    status: available_rw
  - uuid: <replicaset_2>
    status: available_rw
  - uuid: <replicaset_2>
    status: available_rw
...
vshard.router.buckets_info(1500, 3)
---
- 1502:
    status: unknown
  1503:
    status: unknown
  1501:
    uuid: <replicaset_1>
    status: available_rw
...
vshard.router.buckets_info(vshard.consts.DEFAULT_BUCKET_COUNT - 3)
---
- 3000:
    status: unknown
  2998:
    status: unknown
  2999:
    status: unknown
...
util.check_error(vshard.router.buckets_info, '123')
---
- 'Usage: buckets_info(offset, limit)'
...
util.check_error(vshard.router.buckets_info, 123, '456')
---
- 'Usage: buckets_info(offset, limit)'
...
--
-- gh-51: discovery fiber.
--
test_run:cmd("setopt delimiter ';'")
---
- true
...
function calculate_known_buckets()
    local known_buckets = 0
    for _, rs in pairs(vshard.router.internal.route_map) do
        known_buckets = known_buckets + 1
    end
    return known_buckets
end;
---
...
function wait_discovery()
    local known_buckets = 0
    while known_buckets ~= vshard.consts.DEFAULT_BUCKET_COUNT do
        vshard.router.discovery_wakeup()
        fiber.sleep(0.1)
        known_buckets = calculate_known_buckets()
    end
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
wait_discovery()
---
...
calculate_known_buckets()
---
- 3000
...
test_run:grep_log('router_1', 'was 1, became 1500')
---
- was 1, became 1500
...
info = vshard.router.info()
---
...
info.bucket
---
- unreachable: 0
  available_ro: 0
  unknown: 0
  available_rw: 3000
...
info.alerts
---
- []
...
--
-- Ensure the discovery procedure works continuously.
--
test_run:cmd("setopt delimiter ';'")
---
- true
...
for i = 1, 100 do
    local rs = vshard.router.internal.route_map[i]
    assert(rs)
    rs.bucket_count = rs.bucket_count - 1
    vshard.router.internal.route_map[i] = nil
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
calculate_known_buckets()
---
- 2900
...
info = vshard.router.info()
---
...
info.bucket
---
- unreachable: 0
  available_ro: 0
  unknown: 100
  available_rw: 2900
...
info.alerts
---
- - ['UNKNOWN_BUCKETS', '100 buckets are not discovered']
...
wait_discovery()
---
...
calculate_known_buckets()
---
- 3000
...
test_run:grep_log('router_1', 'was 1400, became 1500')
---
- was 1400, became 1500
...
info = vshard.router.info()
---
...
info.bucket
---
- unreachable: 0
  available_ro: 0
  unknown: 0
  available_rw: 3000
...
info.alerts
---
- []
...
--
-- Configuration: inconsistency master=true on storage and routers
--
-- This test case flips masters in replicasets without changing
-- configuration on router and tests NON_MASTER response
--
-- Test the WRITE request
vshard.router.call(1, 'write', 'echo', { 'hello world' })
---
- hello world
...
-- Shuffle masters
util.shuffle_masters(cfg)
---
...
-- Reconfigure storages
test_run:cmd("switch storage_1_a")
---
- true
...
cfg.sharding = test_run:eval('router_1', 'return cfg.sharding')[1]
---
...
vshard.storage.cfg(cfg, names['storage_1_a'])
---
...
test_run:cmd("switch storage_1_b")
---
- true
...
cfg.sharding = test_run:eval('router_1', 'return cfg.sharding')[1]
---
...
vshard.storage.cfg(cfg, names['storage_1_b'])
---
...
test_run:cmd("switch storage_2_a")
---
- true
...
cfg.sharding = test_run:eval('router_1', 'return cfg.sharding')[1]
---
...
vshard.storage.cfg(cfg, names['storage_2_a'])
---
...
test_run:cmd("switch storage_2_b")
---
- true
...
cfg.sharding = test_run:eval('router_1', 'return cfg.sharding')[1]
---
...
vshard.storage.cfg(cfg, names['storage_2_b'])
---
...
-- Test that the WRITE request doesn't work
test_run:cmd("switch router_1")
---
- true
...
util.check_error(vshard.router.call, 1, 'write', 'echo', { 'hello world' })
---
- null
- {'type': 'ShardingError', 'code': 2, 'bucket_id': 1}
...
-- Reconfigure router and test that the WRITE request does work
vshard.router.cfg(cfg)
---
...
vshard.router.call(1, 'write', 'echo', { 'hello world' })
---
- hello world
...
-- Sync API
vshard.router.sync()
---
...
util.check_error(vshard.router.sync, "xxx")
---
- 'Usage: vshard.router.sync([timeout: number])'
...
vshard.router.sync(100500)
---
...
_ = test_run:cmd("switch default")
---
...
test_run:drop_cluster(REPLICASET_2)
---
...
-- gh-24: log all connnect/disconnect events.
while test_run:grep_log('router_1', 'disconnected from ') == nil do fiber.sleep(0.1) end
---
...
test_run:cmd("stop server router_1")
---
- true
...
test_run:cmd("cleanup server router_1")
---
- true
...
test_run:drop_cluster(REPLICASET_1)
---
...
test_run:cmd('clear filter')
---
- true
...
