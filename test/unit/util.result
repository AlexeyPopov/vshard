test_run = require('test_run').new()
---
...
fiber = require('fiber')
---
...
log = require('log')
---
...
test_util = require('util')
---
...
util = require('vshard.util')
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
fake_M = {
    reloadable_func = nil,
    module_version = 1,
};
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
function slow_fail() fiber.sleep(0.01) error('Error happened.') end
---
...
-- Check autoreload on function change during failure.
fake_M.reloadable_function = function () fake_M.reloadable_function = slow_fail; slow_fail() end
---
...
fib = fiber.create(util.reloadable_fiber_f, fake_M, 'reloadable_function', 'Worker_name')
---
...
while not test_run:grep_log('default', 'Worker_name: reloadable function reloadable_function has been changed') do fiber.sleep(0.01); end
---
...
fib:cancel()
---
...
test_run:grep_log('default', 'Worker_name is reloaded, restarting')
---
- Worker_name is reloaded, restarting
...
test_run:grep_log('default', 'Worker_name has been started')
---
- Worker_name has been started
...
log.info(string.rep('a', 1000))
---
...
-- Check reload feature.
fake_M.reloadable_function = function () fiber.sleep(0.01); return true end
---
...
fib = fiber.create(util.reloadable_fiber_f, fake_M, 'reloadable_function', 'Worker_name')
---
...
while not test_run:grep_log('default', 'Worker_name is reloaded, restarting') do fiber.sleep(0.01) end
---
...
fib:cancel()
---
...
test_run:grep_log('default', 'Worker_name has been started', 1000)
---
- Worker_name has been started
...
