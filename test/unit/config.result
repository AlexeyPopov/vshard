test_run = require('test_run').new()
---
...
vshard = require('vshard')
---
...
lcfg = require('vshard.cfg')
---
...
util = require('util')
---
...
--
-- Check sharding config sanity.
--
function check(cfg) return util.check_error(lcfg.check, cfg) end
---
...
-- Not table.
check(100)
---
- Ð¡onfig must be map of options
...
-- Sharding is not a table.
check({sharding = 100})
---
- Sharding must be table
...
-- Replicaset is not table.
check({sharding = {100}})
---
- Replicaset must be a table
...
replica = {}
---
...
replicaset = {replicas = {['replica_uuid'] = replica}}
---
...
cfg = {sharding = {['replicaset_uuid'] = replicaset}}
---
...
-- URI is not string.
check(cfg)
---
- URI must be specified
...
replica.uri = 100
---
...
check(cfg)
---
- URI must be non-empty string
...
replica.uri = 'uri:uri@uri'
---
...
-- Name is not string.
check(cfg)
---
- Name must be specified
...
replica.name = 100
---
...
check(cfg)
---
- Name must be string
...
replica.name = 'storage'
---
...
-- Master is not boolean.
replica.master = 100
---
...
check(cfg)
---
- Master must be boolean
...
replica.master = true
---
...
-- Multiple masters.
replica2 = {uri = 'uri:uri@uri2', name = 'storage2', master = true}
---
...
replicaset.replicas['id2'] = replica2
---
...
check(cfg)
---
- Only one master is allowed per replicaset
...
replicaset.replicas['id2'] = nil
---
...
-- URI duplicate in one replicaset.
replica2 = {uri = 'uri:uri@uri', name = 'storage2'}
---
...
replicaset.replicas['id2'] = replica2
---
...
check(cfg)
---
- Duplicate uri uri:uri@uri
...
replicaset.replicas['id2'] = nil
---
...
-- URI duplicate in different replicasets.
replicaset2 = {replicas = {['id2'] = {uri = 'uri:uri@uri', name = 'storage2', master = true}}}
---
...
cfg.sharding['rsid2'] = replicaset2
---
...
check(cfg)
---
- Duplicate uri uri:uri@uri
...
cfg.sharding['rsid2'] = nil
---
...
-- UUID duplicate in different replicasets.
replicaset2 = {replicas = {['id3'] = {uri = 'uri:uri@uri2', name = 'storage', master = true}}}
---
...
cfg.sharding['rsid2'] = replicaset2
---
...
replicaset3 = {replicas = {['id3'] = {uri = 'uri:uri@uri3', name = 'storage', master = true}}}
---
...
cfg.sharding['rsid3'] = replicaset3
---
...
check(cfg)
---
- Duplicate uuid id3
...
cfg.sharding['rsid2'] = nil
---
...
cfg.sharding['rsid3'] = nil
---
...
--
-- gh-40: replicaset weight. Weight is used by a rebalancer to
-- correctly spead buckets on a cluster.
--
replicaset.weight = '100'
---
...
check(cfg)
---
- Weight must be non-negative number
...
replicaset.weight = -100
---
...
check(cfg)
---
- Weight must be non-negative number
...
replicaset.weight = 0
---
...
_ = lcfg.check(cfg)
---
...
replicaset.weight = 0.123
---
...
_ = lcfg.check(cfg)
---
...
replicaset.weight = 100000
---
...
_ = lcfg.check(cfg)
---
...
--
-- gh-12: zones, zone weight and failover by weight.
--
cfg.weights = 100
---
...
check(cfg)
---
- Weight matrix must be table
...
cfg.weights = {[{1}] = 200}
---
...
check(cfg)
---
- Zone identifier must be either string or number
...
weights = {zone1 = 100}
---
...
cfg.weights = weights
---
...
check(cfg)
---
- Zone must be map of relative weights of other zones
...
weights.zone1 = {[{1}] = 100}
---
...
check(cfg)
---
- Zone identifier must be either string or number
...
weights.zone1 = {zone2 = '100'}
---
...
check(cfg)
---
- Zone weight must be either nil or non-negative number
...
weights.zone1 = {zone1 = 100}
---
...
check(cfg)
---
- Weight of own zone must be either nil or 0
...
weights[2] = {zone1 = 100}
---
...
weights.zone1 = {[2] = 100}
---
...
_ = lcfg.check(cfg)
---
...
--
-- gh-62: allow to specify bucket_count, rebalancer settings.
--
cfg.bucket_count = -100
---
...
check(cfg)
---
- Bucket count must be positive integer
...
cfg.bucket_count = '0'
---
...
check(cfg)
---
- Bucket count must be positive integer
...
cfg.bucket_count = 100.5
---
...
check(cfg)
---
- Bucket count must be positive integer
...
cfg.bucket_count = 0
---
...
check(cfg)
---
- Bucket count must be positive integer
...
cfg.bucket_count = 100
---
...
_ = lcfg.check(cfg)
---
...
cfg.rebalancer_disbalance_threshold = -100
---
...
check(cfg)
---
- Rebalancer disbalance threshold must be non-negative number
...
cfg.rebalancer_disbalance_threshold = '100'
---
...
check(cfg)
---
- Rebalancer disbalance threshold must be non-negative number
...
cfg.rebalancer_disbalance_threshold = 0.5
---
...
_ = lcfg.check(cfg)
---
...
cfg.rebalancer_max_receiving = -100
---
...
check(cfg)
---
- Rebalancer max receiving bucket count must be positive integer
...
cfg.rebalancer_max_receiving = '100'
---
...
check(cfg)
---
- Rebalancer max receiving bucket count must be positive integer
...
cfg.rebalancer_max_receiving = 0.5
---
...
check(cfg)
---
- Rebalancer max receiving bucket count must be positive integer
...
cfg.rebalancer_max_receiving = 0
---
...
check(cfg)
---
- Rebalancer max receiving bucket count must be positive integer
...
cfg.rebalancer_max_receiving = 10
---
...
_ = lcfg.check(cfg)
---
...
--
-- gh-74: allow to specify name or id of an index on bucket
-- identifiers.
--
cfg.shard_index = -100
---
...
check(cfg)
---
- 'Shard index must be one of the following types: non-empty string, non-negative
  integer'
...
cfg.shard_index = 0.1
---
...
check(cfg)
---
- 'Shard index must be one of the following types: non-empty string, non-negative
  integer'
...
cfg.shard_index = 0
---
...
_ = lcfg.check(cfg)
---
...
cfg.shard_index = ''
---
...
check(cfg)
---
- 'Shard index must be one of the following types: non-empty string, non-negative
  integer'
...
cfg.shard_index = 'vbucket'
---
...
_ = lcfg.check(cfg)
---
...
--
-- gh-77: garbage collection options.
--
cfg.collect_bucket_garbage_interval = 'str'
---
...
check(cfg)
---
- Garbage bucket collect interval must be positive number
...
cfg.collect_bucket_garbage_interval = 0
---
...
check(cfg)
---
- Garbage bucket collect interval must be positive number
...
cfg.collect_bucket_garbage_interval = -1
---
...
check(cfg)
---
- Garbage bucket collect interval must be positive number
...
cfg.collect_bucket_garbage_interval = 100.5
---
...
_ = lcfg.check(cfg)
---
...
cfg.collect_lua_garbage = 100
---
...
check(cfg)
---
- Garbage Lua collect necessity must be boolean
...
cfg.collect_lua_garbage = true
---
...
_ = lcfg.check(cfg)
---
...
cfg.collect_lua_garbage = false
---
...
_ = lcfg.check(cfg)
---
...
