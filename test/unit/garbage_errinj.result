test_run = require('test_run').new()
---
...
vshard = require('vshard')
---
...
fiber = require('fiber')
---
...
format = {}
---
...
format[1] = {name = 'id', type = 'unsigned'}
---
...
format[2] = {name = 'status', type = 'string', is_nullable = true}
---
...
_bucket = box.schema.create_space('_bucket', {format = format})
---
...
_ = _bucket:create_index('pk')
---
...
_ = _bucket:create_index('status', {parts = {{2, 'string'}}, unique = false})
---
...
_bucket:replace{1, vshard.consts.BUCKET.ACTIVE}
---
- [1, 'active']
...
_bucket:replace{2, vshard.consts.BUCKET.RECEIVING}
---
- [2, 'receiving']
...
_bucket:replace{3, vshard.consts.BUCKET.ACTIVE}
---
- [3, 'active']
...
_bucket:replace{4, vshard.consts.BUCKET.SENT}
---
- [4, 'sent']
...
_bucket:replace{5, vshard.consts.BUCKET.GARBAGE}
---
- [5, 'garbage']
...
format = {}
---
...
format[1] = {name = 'field1', type = 'unsigned'}
---
...
format[2] = {name = 'bucket_id', type = 'unsigned'}
---
...
s = box.schema.create_space('test', {format = format})
---
...
pk = s:create_index('pk')
---
...
sk = s:create_index('sk', {parts = {{2, 'unsigned'}}, unique = false})
---
...
s:replace{1, 1}
---
- [1, 1]
...
s:replace{2, 1}
---
- [2, 1]
...
s:replace{3, 2}
---
- [3, 2]
...
s:replace{4, 2}
---
- [4, 2]
...
s:replace{5, 100}
---
- [5, 100]
...
s:replace{6, 100}
---
- [6, 100]
...
s:replace{7, 4}
---
- [7, 4]
...
s:replace{8, 5}
---
- [8, 5]
...
s2 = box.schema.create_space('test2', {format = format})
---
...
pk2 = s2:create_index('pk')
---
...
sk2 = s2:create_index('sk2', {parts = {{2, 'unsigned'}}, unique = false})
---
...
s2:replace{1, 1}
---
- [1, 1]
...
s2:replace{3, 3}
---
- [3, 3]
...
-- Garbage bucket {200} is deleted in two parts: 1000 and 101.
for i = 7, 1107 do s:replace{i, 200} end
---
...
s2:replace{4, 200}
---
- [4, 200]
...
s2:replace{5, 100}
---
- [5, 100]
...
s2:replace{5, 300}
---
- [5, 300]
...
s2:replace{6, 4}
---
- [6, 4]
...
s2:replace{7, 5}
---
- [7, 5]
...
garbage_step = vshard.storage.internal.collect_garbage_step
---
...
control = {bucket_generation = 0, bucket_generation_collected = -1}
---
...
--
-- Test the following case:
-- 1) start garbage collection;
-- 2) deletion of a part of tuples makes long yield;
-- 3) during long yield some of not garbage buckets becames
--    garbage.
-- In such a case restart garbage collection.
--
control.bucket_generation_collected = -1
---
...
vshard.storage.internal.errinj.ERRINJ_BUCKET_PART_DELETE_DELAY = true
---
...
old_count = #s:select{}
---
...
f = fiber.create(function() garbage_step(control) end)
---
...
while old_count == #s:select{} do fiber.sleep(0.1) end
---
...
_bucket:delete{3}
---
- [3, 'active']
...
control.bucket_generation = 1
---
...
vshard.storage.internal.errinj.ERRINJ_BUCKET_PART_DELETE_DELAY = false
---
...
while f:status() ~= 'dead' do fiber.sleep(0.1) end
---
...
-- Bucket {100} deleted.
sk:select{100}
---
- []
...
-- Bucket {200} is not deleted - the step had been interrupted by
-- _bucket change.
#sk:select{200}
---
- 1101
...
-- Space 's2' is not changed - the interrupt was on a space 's'.
#s2:select{}
---
- 6
...
control.bucket_generation_collected
---
- -1
...
_bucket:replace{3, vshard.consts.BUCKET.ACTIVE}
---
- [3, 'active']
...
-- Restart garbage collection.
garbage_step(control)
---
...
control.bucket_generation_collected
---
- 1
...
--
-- Test _bucket generation change during garbage buckets search.
--
control.bucket_generation_collected = -1
---
...
control.bucket_generation = 1
---
...
vshard.storage.internal.errinj.ERRINJ_BUCKET_FIND_GARBAGE_DELAY = true
---
...
f = fiber.create(function() garbage_step(control) end)
---
...
_bucket:replace{4, vshard.consts.BUCKET.GARBAGE}
---
- [4, 'garbage']
...
s:replace{5, 4}
---
- [5, 4]
...
s:replace{6, 4}
---
- [6, 4]
...
#s:select{}
---
- 6
...
vshard.storage.internal.errinj.ERRINJ_BUCKET_FIND_GARBAGE_DELAY = false
---
...
while f:status() ~= 'dead' do fiber.sleep(0.1) end
---
...
-- Nothing is deleted - _bucket:replace() has changed _bucket
-- generation during search of garbage buckets.
#s:select{}
---
- 6
...
_bucket:select{4}
---
- - [4, 'garbage']
...
-- Next step deletes garbage ok.
garbage_step(control)
---
...
#s:select{}
---
- 4
...
_bucket:delete{4}
---
- [4, 'garbage']
...
--
-- Test WAL error during garbage bucket cleaning.
--
collect_f = vshard.storage.internal.collect_garbage_f
---
...
f = fiber.create(collect_f)
---
...
vshard.storage.internal.errinj.ERRINJ_BUCKET_PART_DELETE_DELAY = true
---
...
_bucket:replace{4, vshard.consts.BUCKET.SENT}
---
- [4, 'sent']
...
s:replace{5, 4}
---
- [5, 4]
...
s:replace{6, 4}
---
- [6, 4]
...
box_errinj = box.error.injection
---
...
box_errinj.set("ERRINJ_WAL_IO", true)
---
- ok
...
vshard.storage.internal.errinj.ERRINJ_BUCKET_PART_DELETE_DELAY = false
---
...
while not test_run:grep_log("default", "Error during garbage collection step") do fiber.sleep(0.1) end
---
...
s:select{}
---
- - [1, 1]
  - [2, 1]
  - [3, 2]
  - [4, 2]
  - [5, 4]
  - [6, 4]
...
_bucket:select{}
---
- - [1, 'active']
  - [2, 'receiving']
  - [3, 'active']
  - [4, 'sent']
...
box_errinj.set("ERRINJ_WAL_IO", false)
---
- ok
...
while _bucket:get{4} ~= nil do fiber.sleep(0.1) end
---
...
f:cancel()
---
...
s2:drop()
---
...
s:drop()
---
...
_bucket:drop()
---
...
