test_run = require('test_run').new()
---
...
vshard = require('vshard')
---
...
fiber = require('fiber')
---
...
calc_metrics = vshard.storage.internal.rebalancer_calculate_metrics
---
...
build_routes = vshard.storage.internal.rebalancer_build_routes
---
...
consts = vshard.consts
---
...
--
-- Test adding two new replicasets.
--
test_run:cmd("setopt delimiter ';'")
---
- true
...
replicasets = {
	uuid1 = {bucket_count = 100, weight = 50},
	uuid2 = {bucket_count = 0, weight = 20},
	uuid3 = {bucket_count = 0, weight = 30},
};
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
calc_metrics(replicasets, 100, consts.DEFAULT_REBALANCER_MAX_RECEIVING)
---
- 100
...
replicasets
---
- uuid1:
    needed: -50
    weight: 50
    bucket_count: 100
  uuid3:
    needed: 30
    weight: 30
    bucket_count: 0
  uuid2:
    needed: 20
    weight: 20
    bucket_count: 0
...
build_routes(replicasets)
---
- uuid1:
    uuid2: 20
    uuid3: 30
...
--
-- Test removing replicasets.
--
test_run:cmd("setopt delimiter ';'")
---
- true
...
replicasets = {
	uuid1 = {bucket_count = 2, weight = 1},
	uuid2 = {bucket_count = 2, weight = 1},
	uuid3 = {bucket_count = 3, weight = 0},
};
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
calc_metrics(replicasets, 7, consts.DEFAULT_REBALANCER_MAX_RECEIVING)
---
- inf
...
replicasets
---
- uuid1:
    needed: 2
    weight: 1
    bucket_count: 2
  uuid3:
    needed: -3
    weight: 0
    bucket_count: 3
  uuid2:
    needed: 2
    weight: 1
    bucket_count: 2
...
build_routes(replicasets)
---
- uuid3:
    uuid2: 1
    uuid1: 2
...
--
-- Test big weights.
--
test_run:cmd("setopt delimiter ';'")
---
- true
...
replicasets = {
	uuid1 = {bucket_count = 100, weight = 1000},
	uuid2 = {bucket_count = 100, weight = 2000},
	uuid3 = {bucket_count = 100, weight = 500},
};
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
calc_metrics(replicasets, 300, consts.DEFAULT_REBALANCER_MAX_RECEIVING)
---
- 133
...
replicasets
---
- uuid1:
    needed: -14
    weight: 1000
    bucket_count: 100
  uuid3:
    needed: -57
    weight: 500
    bucket_count: 100
  uuid2:
    needed: 72
    weight: 2000
    bucket_count: 100
...
build_routes(replicasets)
---
- uuid1:
    uuid2: 14
  uuid3:
    uuid2: 57
...
--
-- Test no changes on already balanced cluster.
--
test_run:cmd("setopt delimiter ';'")
---
- true
...
replicasets = {
	uuid1 = {bucket_count = 100, weight = 1},
	uuid2 = {bucket_count = 100, weight = 1},
	uuid3 = {bucket_count = 100, weight = 1},
};
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
calc_metrics(replicasets, 300, consts.DEFAULT_REBALANCER_MAX_RECEIVING)
---
- 0
...
replicasets
---
- uuid1:
    needed: 0
    weight: 1
    bucket_count: 100
  uuid3:
    needed: 0
    weight: 1
    bucket_count: 100
  uuid2:
    needed: 0
    weight: 1
    bucket_count: 100
...
build_routes(replicasets)
---
- []
...
--
-- gh-4: limit number of buckets receiving at once by node. In the
-- test below a new replicaset is introduced and it needed 1000
-- buckets. But at once it can receive only specified in config
-- ones.
--
test_run:cmd("setopt delimiter ';'")
---
- true
...
replicasets = {
	uuid1 = {bucket_count = 1500, weight = 1},
	uuid2 = {bucket_count = 1500, weight = 1},
	uuid3 = {bucket_count = 0, weight = 1},
};
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
calc_metrics(replicasets, 3000, consts.DEFAULT_REBALANCER_MAX_RECEIVING)
---
- 100
...
replicasets
---
- uuid1:
    needed: -500
    weight: 1
    bucket_count: 1500
  uuid3:
    needed: 100
    weight: 1
    bucket_count: 0
  uuid2:
    needed: -500
    weight: 1
    bucket_count: 1500
...
build_routes(replicasets)
---
- uuid2:
    uuid3: 100
...
--
-- Test rebalancer local state.
--
get_state = vshard.storage.rebalancer_request_state
---
...
_bucket = box.schema.create_space('_bucket')
---
...
pk = _bucket:create_index('pk')
---
...
status = _bucket:create_index('status', {parts = {{2, 'string'}}, unique = false})
---
...
_bucket:replace{1, consts.BUCKET.ACTIVE}
---
- [1, 'active']
...
_bucket:replace{2, consts.BUCKET.ACTIVE}
---
- [2, 'active']
...
_bucket:replace{3, consts.BUCKET.SENT}
---
- [3, 'sent']
...
get_state()
---
- 2
...
_bucket:replace{1, consts.BUCKET.RECEIVING}
---
- [1, 'receiving']
...
get_state()
---
...
_bucket:drop()
---
...
